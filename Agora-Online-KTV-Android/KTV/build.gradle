if (isModule.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

if (getGradle().getStartParameter().getTaskRequests()
        .toString().contains("firebase")) {
    apply plugin: 'com.google.gms.google-services'
}

android {
    compileSdkVersion COMPILESDKVERSION
    buildToolsVersion BUILDTOOLSVERSION

    defaultConfig {
        if (isModule.toBoolean()) {
            applicationId "io.agora.ktv"
        }
        minSdkVersion MINSDKVERSION
        targetSdkVersion TARGETSDKVERSION
        versionCode 10
        versionName "1.0.10"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        multiDexEnabled true


        ndk{
            abiFilters "arm64-v8a"
        }
    }

    buildTypes {
        release {
            shrinkResources = true
            zipAlignEnabled = true
            minifyEnabled = true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        viewBinding true
    }

    flavorDimensions "test","abi"
    productFlavors {
        create("armeabi-v7a"){
            dimension = "abi"
            ndk {
                abiFilter "armeabi-v7a"
            }
        }
        create("arm64-v8a"){
            dimension = "abi"
            ndk {
                abiFilter "arm64-v8a"
            }
        }
        create("x86"){
            dimension = "abi"
            ndk {
                abiFilter "x86"
            }
        }
        create("x86_64"){
            dimension = "abi"
            ndk {
                abiFilter "x86_64"
            }
        }
        create("ALL"){
            dimension = "abi"
        }

        create("leancloud"){
            dimension = "test"
        }
    }

    if (isModule.toBoolean()) {
        applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = "Chorus-${versionName}.apk"
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Agora SDK
//    implementation 'com.github.agorabuilder:agora-special-full:3.6.208.full'
    //implementation 'io.agora.rtc:agora-full-beta:4.0.0-beta.1'
    implementation 'androidx.palette:palette:1.0.0'
    api project(':baselibrary')
    api project(':data')
    implementation 'com.github.AgoraIO-Community:LrcView-Android:1.0.5'
    implementation files('libs/agora-rtc-sdk.jar')
}